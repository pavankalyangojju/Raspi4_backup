import cv2
import numpy as np
import tflite_runtime.interpreter as tflite
import os, json, time, csv, sys
from datetime import datetime
from mfrc522 import SimpleMFRC522
import requests
import threading
import RPi.GPIO as GPIO

# === GPIO Setup ===
BUZZER_PIN = 17
GREEN_LED_PIN = 2
RED_LED_PIN = 3
SERVO_PIN = 21

LIGHT1_PIN = 26
LIGHT2_PIN = 19
FAN1_PIN = 13
FAN2_PIN = 6

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(BUZZER_PIN, GPIO.OUT)
GPIO.setup(GREEN_LED_PIN, GPIO.OUT)
GPIO.setup(RED_LED_PIN, GPIO.OUT)
GPIO.setup(SERVO_PIN, GPIO.OUT)
GPIO.setup(LIGHT1_PIN, GPIO.OUT)
GPIO.output(LIGHT1_PIN, GPIO.LOW)
GPIO.setup(LIGHT2_PIN, GPIO.OUT)
GPIO.output(LIGHT2_PIN, GPIO.LOW)
GPIO.setup(FAN1_PIN, GPIO.OUT)
GPIO.output(FAN1_PIN, GPIO.LOW)
GPIO.setup(FAN2_PIN, GPIO.OUT)
GPIO.output(FAN2_PIN, GPIO.LOW)

GPIO.output(BUZZER_PIN, GPIO.LOW)
GPIO.output(GREEN_LED_PIN, GPIO.LOW)
GPIO.output(RED_LED_PIN, GPIO.LOW)

servo = GPIO.PWM(SERVO_PIN, 50)
servo.start(0)

reader = SimpleMFRC522()

interpreter = tflite.Interpreter(model_path="facenet.tflite")
interpreter.allocate_tensors()
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()
input_type = input_details[0]['dtype']

face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + "haarcascade_frontalface_default.xml")

def detect_and_crop_face(img):
    gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
    faces = face_cascade.detectMultiScale(gray, 1.1, 5)
    if len(faces) == 0:
        return None
    x, y, w, h = faces[0]
    margin = 20
    x1, y1 = max(0, x - margin), max(0, y - margin)
    x2, y2 = x + w + margin, y + h + margin
    return img[y1:y2, x1:x2]

def preprocess_face(face_img):
    face = cv2.resize(face_img, (160, 160))
    if input_type == np.uint8:
        return np.expand_dims(face, axis=0)
    else:
        face = face.astype('float32')
        mean, std = face.mean(), face.std()
        face = (face - mean) / std
        return np.expand_dims(face, axis=0)

def get_embedding(face_img):
    preprocessed = preprocess_face(face_img)
    interpreter.set_tensor(input_details[0]['index'], preprocessed)
    interpreter.invoke()
    embedding = interpreter.get_tensor(output_details[0]['index'])[0]
    return embedding / np.linalg.norm(embedding)

def cosine_similarity(a, b):
    return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))

def load_known_faces():
    known_embeddings = {}
    for name in os.listdir("dataset"):
        path = f"dataset/{name}/face.jpg"
        if os.path.exists(path):
            img = cv2.imread(path)
            if img is None:
                continue
            face_img = detect_and_crop_face(img)
            if face_img is None:
                continue
            embedding = get_embedding(face_img)
            known_embeddings[name] = embedding
    return known_embeddings

known_faces = load_known_faces()

try:
    with open("rfid_map.json", "r") as f:
        rfid_map = json.load(f)
except FileNotFoundError:
    rfid_map = {}

attendance_log_file = "/home/pi/Desktop/AIDS/attendance_log.csv"
if not os.path.exists(attendance_log_file):
    with open(attendance_log_file, 'w', newline='') as file:
        csv.writer(file).writerow(["Name", "RFID", "Date", "Time"])

def restart_program():
    time.sleep(1)
    os.execv(sys.executable, ['python3'] + sys.argv)

def rotate_servo():
    GPIO.output(BUZZER_PIN, GPIO.HIGH)
    time.sleep(2)
    GPIO.output(BUZZER_PIN, GPIO.LOW)
    GPIO.output(LIGHT1_PIN, GPIO.HIGH)
    GPIO.output(LIGHT2_PIN, GPIO.HIGH)
    servo.ChangeDutyCycle(7.5)
    time.sleep(1)
    servo.ChangeDutyCycle(0)
    time.sleep(2)

BOT_TOKEN = "YOUR_TELEGRAM_BOT_TOKEN"
BASE_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
last_update_id = 0

def telegram_listener():
    global last_update_id
    while True:
        try:
            url = f"{BASE_URL}/getUpdates?offset={last_update_id + 1}&timeout=10"
            response = requests.get(url).json()
            for update in response.get("result", []):
                last_update_id = update["update_id"]
                message = update.get("message", {}).get("text", "").lower()
                chat_id = update["message"]["chat"]["id"]
                reply = ""
                if message == "/door_open":
                    reply = "Rotating servo from Telegram..."
                    threading.Thread(target=rotate_servo).start()
                elif message.startswith("/"):
                    pins = {
                        "/light1_on": (LIGHT1_PIN, GPIO.HIGH),
                        "/light1_off": (LIGHT1_PIN, GPIO.LOW),
                        "/light2_on": (LIGHT2_PIN, GPIO.HIGH),
                        "/light2_off": (LIGHT2_PIN, GPIO.LOW),
                        "/fan1_on": (FAN1_PIN, GPIO.HIGH),
                        "/fan1_off": (FAN1_PIN, GPIO.LOW),
                        "/fan2_on": (FAN2_PIN, GPIO.HIGH),
                        "/fan2_off": (FAN2_PIN, GPIO.LOW),
                    }
                    if message in pins:
                        GPIO.output(*pins[message])
                        reply = message.upper().replace("_", " ") + " EXECUTED"
                    elif message == "/all_on":
                        for pin in [LIGHT1_PIN, LIGHT2_PIN, FAN1_PIN, FAN2_PIN]:
                            GPIO.output(pin, GPIO.HIGH)
                        reply = "ALL DEVICES ON"
                    elif message == "/all_off":
                        for pin in [LIGHT1_PIN, LIGHT2_PIN, FAN1_PIN, FAN2_PIN]:
                            GPIO.output(pin, GPIO.LOW)
                        reply = "ALL DEVICES OFF"
                    else:
                        reply = "Send a valid command."
                requests.post(f"{BASE_URL}/sendMessage", data={"chat_id": chat_id, "text": reply})
        except Exception as e:
            print(f"[ERROR] Telegram: {e}")
        time.sleep(2)

threading.Thread(target=telegram_listener, daemon=True).start()

def main():
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        restart_program()

    cv2.namedWindow("Detected Face", cv2.WINDOW_NORMAL)
    try:
        while True:
            GPIO.output(GREEN_LED_PIN, GPIO.LOW)
            print("Waiting for RFID...")
            id, text = reader.read()
            scanned_uid = str(id).strip()

            matched_user = None
            for name, uid in rfid_map.items():
                if uid == scanned_uid:
                    matched_user = name
                    break

            if not matched_user:
                print("[WARNING] Unknown RFID")
                continue

            print(f"[INFO] RFID matched with {matched_user}, waiting for face...")
            attempts = 0

            while True:
                ret, frame = cap.read()
                if not ret:
                    restart_program()

                face_img = detect_and_crop_face(frame)
                if face_img is None:
                    print("[WARNING] No face detected")
                    continue

                cv2.imshow("Detected Face", face_img)

                embedding = get_embedding(face_img)
                known_embedding = known_faces.get(matched_user)

                if known_embedding is None:
                    print("[ERROR] Face not found in dataset")
                    continue

                similarity = cosine_similarity(embedding, known_embedding)
                print(f"[DEBUG] Similarity: {similarity:.4f}")

                if similarity > 0.6:
                    print(f"[SUCCESS] {matched_user} - Match: {similarity:.2f}")
                    now = datetime.now()
                    with open(attendance_log_file, 'a', newline='') as file:
                        csv.writer(file).writerow([matched_user, scanned_uid, now.strftime("%Y-%m-%d"), now.strftime("%H:%M:%S")])
                    GPIO.output(GREEN_LED_PIN, GPIO.HIGH)
                    time.sleep(2)
                    rotate_servo()
                    cap.release()
                    cv2.destroyAllWindows()
                    return
                else:
                    attempts += 1
                    if attempts > 15:
                        print("[WARNING] Face not matched after 15 attempts")
                        GPIO.output(BUZZER_PIN, GPIO.HIGH)
                        GPIO.output(RED_LED_PIN, GPIO.HIGH)
                        time.sleep(3)
                        cap.release()
                        cv2.destroyAllWindows()
                        restart_program()

                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break
    except KeyboardInterrupt:
        print("[INFO] Interrupted by user.")
    finally:
        cap.release()
        cv2.destroyAllWindows()

while True:
    main()
