import cv2
import numpy as np
from PIL import Image
import os
import pandas as pd

# === Paths ===
known_path = 'faces'
unknown_path = 'faces_unknown'
trainer_path = 'trainer'
labels_csv = os.path.join(trainer_path, 'labels.csv')
trainer_file = os.path.join(trainer_path, 'trainer.yml')

if not os.path.exists(trainer_path):
    os.makedirs(trainer_path)

recognizer = cv2.face.LBPHFaceRecognizer_create()
detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

def extract_name(filename):
    try:
        return filename.split('_')[1]  # e.g., 'pavan'
    except:
        return None

def getImagesAndLabels():
    face_samples = []
    labels = []
    label_map = {}  # name -> id
    current_id = 0

    # === Load known images ===
    for image_file in os.listdir(known_path):
        if not image_file.lower().endswith(('.jpg', '.png')):
            continue
        name = extract_name(image_file)
        if not name:
            print(f"[WARNING] Skipping: {image_file}")
            continue
        if name not in label_map:
            label_map[name] = current_id
            current_id += 1

        image_path = os.path.join(known_path, image_file)
        try:
            pil_img = Image.open(image_path).convert('L')
            img_numpy = np.array(pil_img, 'uint8')
            faces = detector.detectMultiScale(img_numpy)

            for (x, y, w, h) in faces:
                face = cv2.resize(img_numpy[y:y+h, x:x+w], (200, 200))
                face_samples.append(face)
                labels.append(label_map[name])
        except Exception as e:
            print(f"[ERROR] {image_file}: {e}")

    # === Load unknown images ===
    unknown_name = "unknown"
    if unknown_name not in label_map:
        label_map[unknown_name] = current_id
        current_id += 1

    for image_file in os.listdir(unknown_path):
        if not image_file.lower().endswith(('.jpg', '.png')):
            continue
        image_path = os.path.join(unknown_path, image_file)
        try:
            pil_img = Image.open(image_path).convert('L')
            img_numpy = np.array(pil_img, 'uint8')
            faces = detector.detectMultiScale(img_numpy)

            for (x, y, w, h) in faces:
                face = cv2.resize(img_numpy[y:y+h, x:x+w], (200, 200))
                face_samples.append(face)
                labels.append(label_map[unknown_name])
        except Exception as e:
            print(f"[ERROR] {image_file}: {e}")

    return face_samples, labels, label_map

# === Train ===
print("[INFO] Training faces (including 'unknown' class)...")
faces, labels, label_map = getImagesAndLabels()

if not faces:
    print("[ERROR] No faces found.")
    exit()

recognizer.train(faces, np.array(labels))
recognizer.write(trainer_file)

# === Save label mapping: ID -> Name ===
reverse_map = {id: name for name, id in label_map.items()}
label_df = pd.DataFrame([{"ID": id, "Name": name} for id, name in reverse_map.items()])
label_df.to_csv(labels_csv, index=False)

print(f"[INFO] {len(label_map)} total classes trained.")
print(f"[INFO] Model saved to: {trainer_file}")
print(f"[INFO] Labels saved to: {labels_csv}")
