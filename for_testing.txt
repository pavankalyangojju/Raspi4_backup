'''
Real Time Face Recognition with RFID Folder-Based Matching + Servo + Relay + Telegram Control
'''

import cv2
import os
import numpy as np
import RPi.GPIO as GPIO
from mfrc522 import SimpleMFRC522
import time
from PIL import Image
import pandas as pd
import threading
import requests

# Setup GPIO
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)

# Assign unique pins to each relay
RELAY_PINL1 = 21
RELAY_PINL2 = 20
RELAY_PINF1 = 16
RELAY_PINF2 = 12
SERVO_PIN = 17

RELAY_PINS = {
    "relay1": RELAY_PINL1,
    "relay2": RELAY_PINL2,
    "relay3": RELAY_PINF1,
    "relay4": RELAY_PINF2,
}

for pin in RELAY_PINS.values():
    GPIO.setup(pin, GPIO.OUT)
    GPIO.output(pin, GPIO.LOW)

GPIO.setup(SERVO_PIN, GPIO.OUT)
servo = GPIO.PWM(SERVO_PIN, 50)
servo.start(0)

# Telegram Bot
BOT_TOKEN = "8129064480:AAFZZjw7UTUrPgwUW33xu_B51MyJPg3WneY"
BASE_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
last_update_id = 0

# Camera
cam = cv2.VideoCapture(0)
cam.set(3, 640)
cam.set(4, 480)

def open_close():
    servo.ChangeDutyCycle(12.5)
    time.sleep(1)
    servo.ChangeDutyCycle(0)
    time.sleep(3)
    servo.ChangeDutyCycle(2.5)
    time.sleep(1)
    servo.ChangeDutyCycle(0)

def handle_telegram():
    global last_update_id
    while True:
        try:
            response = requests.get(f"{BASE_URL}/getUpdates?offset={last_update_id + 1}&timeout=10").json()
            for update in response.get("result", []):
                last_update_id = update["update_id"]
                message = update.get("message", {}).get("text", "").lower()
                chat_id = update["message"]["chat"]["id"]
                if message.startswith("/relay"):
                    for name, pin in RELAY_PINS.items():
                        if message == f"/{name}_on":
                            GPIO.output(pin, GPIO.HIGH)
                            requests.post(f"{BASE_URL}/sendMessage", data={"chat_id": chat_id, "text": f"{name} ON"})
                        elif message == f"/{name}_off":
                            GPIO.output(pin, GPIO.LOW)
                            requests.post(f"{BASE_URL}/sendMessage", data={"chat_id": chat_id, "text": f"{name} OFF"})
        except Exception as e:
            print(f"[ERROR] Telegram handler: {e}")
        time.sleep(1)

def main():
    reader = SimpleMFRC522()
    face_detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")
    recognizer = cv2.face.LBPHFaceRecognizer_create()

    try:
        rfid_id, _ = reader.read()
        rfid_id = str(rfid_id)
        print(f"[INFO] RFID Scanned: {rfid_id}")
    except Exception as e:
        print(f"[ERROR] RFID Read Failed: {e}")
        GPIO.cleanup()
        exit()

    image_folder = os.path.join("dataset", rfid_id)
    if not os.path.exists(image_folder):
        print(f"[ERROR] No dataset folder found for RFID {rfid_id}")
        GPIO.cleanup()
        exit()

    def get_images_and_labels(path):
        face_samples, ids = [], []
        for image_path in os.listdir(path):
            if image_path.endswith('.jpg'):
                img = Image.open(os.path.join(path, image_path)).convert('L')
                img_np = np.array(img, 'uint8')
                faces = face_detector.detectMultiScale(img_np)
                for (x, y, w, h) in faces:
                    face_samples.append(img_np[y:y+h, x:x+w])
                    ids.append(1)
        return face_samples, ids

    print("[INFO] Training model...")
    faces, ids = get_images_and_labels(image_folder)
    recognizer.train(faces, np.array(ids))

    user_name = "Unknown"
    try:
        df = pd.read_csv("user_data.csv")
        user_row = df[df['RFID_UID'] == int(rfid_id)]
        if not user_row.empty:
            user_name = user_row.iloc[0]['Name']
    except:
        pass

    matched = False
    while True:
        ret, img = cam.read()
        if not ret:
            continue
        img = cv2.flip(img, -1)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        faces = face_detector.detectMultiScale(gray, 1.3, 5)

        for (x, y, w, h) in faces:
            id_pred, confidence = recognizer.predict(gray[y:y+h, x:x+w])
            if confidence < 40:
                print(f"[INFO] Match: {user_name} - Confidence: {confidence}")
                cv2.putText(img, user_name, (x+5, y-5), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 255, 255), 2)
                open_close()
                # Turn on relay 1 and 2, turn off 3 and 4
                GPIO.output(RELAY_PINL1, GPIO.HIGH)
                GPIO.output(RELAY_PINL2, GPIO.HIGH)
                GPIO.output(RELAY_PINF1, GPIO.LOW)
                GPIO.output(RELAY_PINF2, GPIO.LOW)
                matched = True
            else:
                cv2.putText(img, "Unknown", (x+5, y-5), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

        cv2.imshow("Face Recognition", img)
        if matched or cv2.waitKey(1) & 0xFF == 27:
            break

    cam.release()
    cv2.destroyAllWindows()

if __name__ == '__main__':
    threading.Thread(target=handle_telegram, daemon=True).start()
    while True:
        main()

    servo.stop()
    GPIO.cleanup()
