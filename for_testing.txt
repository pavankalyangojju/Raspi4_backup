import cv2
import numpy as np
import tflite_runtime.interpreter as tflite
import os, json, time
from mfrc522 import SimpleMFRC522
from smbus2 import SMBus
from RPLCD.i2c import CharLCD

# === LCD setup ===
lcd = CharLCD(i2c_expander='PCF8574', address=0x27, port=1, cols=16, rows=2)
lcd.clear()

# === RFID ===
reader = SimpleMFRC522()

# === Load TFLite model ===
interpreter = tflite.Interpreter(model_path="facenet.tflite")
interpreter.allocate_tensors()
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

# === Preprocessing ===
def preprocess_face(face_img):
    face = cv2.resize(face_img, (160, 160))
    face = face.astype('float32')
    mean, std = face.mean(), face.std()
    face = (face - mean) / std
    return np.expand_dims(face, axis=0)

def get_embedding(face_img):
    preprocessed = preprocess_face(face_img)
    interpreter.set_tensor(input_details[0]['index'], preprocessed)
    interpreter.invoke()
    embedding = interpreter.get_tensor(output_details[0]['index'])
    return embedding[0]

def cosine_similarity(a, b):
    return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))

# === Load known faces and embeddings ===
def load_known_faces():
    known_embeddings = {}
    for name in os.listdir("dataset"):
        path = f"dataset/{name}/face.jpg"
        if os.path.exists(path):
            img = cv2.imread(path)
            embedding = get_embedding(img)
            known_embeddings[name] = embedding
    return known_embeddings

known_faces = load_known_faces()

# === Load RFID mapping ===
with open("rfid_map.json", "r") as f:
    rfid_map = json.load(f)  # e.g., {"Alice": "123456789", "Bob": "987654321"}

# === Start Camera ===
cap = cv2.VideoCapture(0)

# Check if camera is opened
if not cap.isOpened():
    print("[ERROR] Camera not accessible!")
    exit()

print("[INFO] Ready for attendance")

while True:
    try:
        lcd.clear()
        lcd.write_string("Scan RFID Card...")
        print("Waiting for RFID...")
        id, text = reader.read()
        print("id:", id)
        print("text:", text)
        scanned_uid = str(id).strip()

        matched_user = None
        for name, uid in rfid_map.items():
            if uid == scanned_uid:
                matched_user = name
                break

        if not matched_user:
            lcd.clear()
            lcd.write_string("Unknown RFID")
            time.sleep(2)
            continue

        lcd.clear()
        lcd.write_string("Show your face")
        print(f"[INFO] RFID matched with {matched_user}, waiting for face...")

        # Wait for 3 seconds before starting face validation
        time.sleep(3)  # Add delay for user to prepare

        while True:  # Keep the camera window open until a match is found or process interrupted
            ret, frame = cap.read()
            if not ret:
                print("[ERROR] Failed to capture frame.")
                continue

            # Show the captured frame for debugging
            cv2.imshow("Camera Feed", frame)

            embedding = get_embedding(frame)
            similarity = cosine_similarity(embedding, known_faces.get(matched_user))

            if similarity > 0.7:
                lcd.clear()
                lcd.write_string(f"{matched_user}")
                lcd.cursor_pos = (1, 0)
                lcd.write_string("Attendance Marked")
                print(f"[SUCCESS] {matched_user} - Match: {similarity:.2f}")
                time.sleep(3)
                cv2.destroyAllWindows()  # Close the camera window after matching
                break  # Exit the loop after a successful match
            else:
                lcd.clear()
                lcd.write_string("Face Not Match")
                print("[WARNING] Face not matched")
                time.sleep(2)

            # Make sure the window updates every time
            if cv2.waitKey(1) & 0xFF == ord('q'):  # Press 'q' to quit the camera window if needed
                break

    except KeyboardInterrupt:
        break

cap.release()
cv2.destroyAllWindows()  # Ensure all windows are closed properly
lcd.clear()
