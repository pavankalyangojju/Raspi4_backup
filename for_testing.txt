import cv2
import numpy as np
from PIL import Image
import os
import pandas as pd

# Paths
dataset_path = 'faces'
trainer_path = 'trainer'
trainer_file = os.path.join(trainer_path, 'trainer.yml')

if not os.path.exists(trainer_path):
    os.makedirs(trainer_path)

recognizer = cv2.face.LBPHFaceRecognizer_create()
detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

# Read RFID list from user_data.csv
user_df = pd.read_csv("user_data.csv")
valid_rfids = set(user_df['RFID_UID'].astype(str))

def extract_rfid(filename):
    try:
        return filename.split('_')[0]  # '1234567890'
    except:
        return None

def getImagesAndLabels(path):
    face_samples = []
    ids = []

    for image_file in os.listdir(path):
        if not image_file.lower().endswith(('.jpg', '.png')):
            continue

        image_path = os.path.join(path, image_file)
        rfid = extract_rfid(image_file)

        if rfid is None or rfid not in valid_rfids:
            print(f"[WARNING] Skipping file: {image_file} â€” RFID not in user_data.csv")
            continue

        try:
            pil_img = Image.open(image_path).convert('L')  # Grayscale
        except Exception as e:
            print(f"[WARNING] Skipping image {image_path}: {e}")
            continue

        img_numpy = np.array(pil_img, 'uint8')
        faces = detector.detectMultiScale(img_numpy)

        for (x, y, w, h) in faces:
            face_samples.append(img_numpy[y:y+h, x:x+w])
            ids.append(int(rfid))  # Use RFID UID as training ID

    return face_samples, ids

print("\n[INFO] Training faces. Please wait...")
faces, ids = getImagesAndLabels(dataset_path)
recognizer.train(faces, np.array(ids))
recognizer.write(trainer_file)

print(f"\n[INFO] {len(set(ids))} unique RFID IDs trained.")
print(f"[INFO] Model saved to {trainer_file}")
