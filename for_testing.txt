import cv2
import numpy as np
import tflite_runtime.interpreter as tflite
import os, json, time, csv
import threading
from datetime import datetime
from queue import Queue
from mfrc522 import SimpleMFRC522
from smbus2 import SMBus
from RPLCD.i2c import CharLCD

# === LCD Setup ===
lcd = CharLCD(i2c_expander='PCF8574', address=0x27, port=1, cols=16, rows=2)

# === RFID Reader ===
reader = SimpleMFRC522()

# === FaceNet Model ===
interpreter = tflite.Interpreter(model_path="facenet.tflite")
interpreter.allocate_tensors()
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()

def preprocess_face(face_img):
    face = cv2.resize(face_img, (160, 160))
    face = face.astype('float32')
    mean, std = face.mean(), face.std()
    face = (face - mean) / std
    return np.expand_dims(face, axis=0)

def get_embedding(face_img):
    preprocessed = preprocess_face(face_img)
    interpreter.set_tensor(input_details[0]['index'], preprocessed)
    interpreter.invoke()
    embedding = interpreter.get_tensor(output_details[0]['index'])
    return embedding[0]

def cosine_similarity(a, b):
    return np.dot(a, b) / (np.linalg.norm(a) * np.linalg.norm(b))

# === Load Known Faces ===
def load_known_faces():
    known_embeddings = {}
    for name in os.listdir("dataset"):
        path = f"dataset/{name}/face.jpg"
        if os.path.exists(path):
            img = cv2.imread(path)
            embedding = get_embedding(img)
            known_embeddings[name] = embedding
    return known_embeddings

known_faces = load_known_faces()

# === Load RFID Mappings ===
with open("rfid_map.json", "r") as f:
    rfid_map = json.load(f)

# === Attendance CSV ===
attendance_log_file = "attendance_log.csv"
if not os.path.exists(attendance_log_file):
    with open(attendance_log_file, mode='w', newline='') as file:
        writer = csv.writer(file)
        writer.writerow(["Name", "RFID", "Date", "Time"])

# === Shared Queues ===
rfid_queue = Queue()
lcd_queue = Queue()

# === LCD Thread ===
def lcd_thread():
    while True:
        try:
            line1, line2, delay = lcd_queue.get()
            lcd.clear()
            lcd.write_string(line1)
            if line2:
                lcd.cursor_pos = (1, 0)
                lcd.write_string(line2)
            time.sleep(delay)
        except Exception as e:
            print(f"[ERROR] LCD Thread: {e}")

# === RFID Reader Thread ===
def rfid_thread():
    while True:
        try:
            lcd_queue.put(("Scan RFID Card...", "", 0))
            print("[INFO] Waiting for RFID...")
            id, _ = reader.read()
            scanned_uid = str(id).strip()

            matched_user = None
            for name, uid in rfid_map.items():
                if uid == scanned_uid:
                    matched_user = name
                    break

            if not matched_user:
                lcd_queue.put(("Unknown RFID", "", 2))
                print("[WARNING] Unknown RFID")
                continue

            lcd_queue.put(("RFID OK", "Show your face", 2))
            print(f"[INFO] RFID matched with {matched_user}, waiting for face...")
            rfid_queue.put((matched_user, scanned_uid))

        except Exception as e:
            print(f"[ERROR] RFID Thread: {e}")

# === Face Recognition Thread ===
def face_thread():
    cap = cv2.VideoCapture(0)
    if not cap.isOpened():
        print("[ERROR] Camera not accessible!")
        lcd_queue.put(("Camera Error", "", 0))
        return

    while True:
        if not rfid_queue.empty():
            matched_user, scanned_uid = rfid_queue.get()

            success = False
            start_time = time.time()
            while time.time() - start_time < 15:
                ret, frame = cap.read()
                if not ret:
                    continue

                cv2.imshow("Camera Feed", frame)
                if cv2.waitKey(1) & 0xFF == ord('q'):
                    break

                embedding = get_embedding(frame)
                similarity = cosine_similarity(embedding, known_faces.get(matched_user))

                if similarity > 0.75:
                    lcd_queue.put((matched_user, "Attendance Marked", 3))
                    print(f"[SUCCESS] {matched_user} - Match: {similarity:.2f}")

                    now = datetime.now()
                    with open(attendance_log_file, mode='a', newline='') as file:
                        writer = csv.writer(file)
                        writer.writerow([matched_user, scanned_uid, now.strftime("%Y-%m-%d"), now.strftime("%H:%M:%S")])
                    success = True
                    break
                else:
                    lcd_queue.put(("Face Not Match", "", 2))
                    print("[INFO] Face not matched")

            if not success:
                print("[INFO] Face match timeout.")
            cv2.destroyAllWindows()

    cap.release()
    cv2.destroyAllWindows()

# === Start All Threads ===
try:
    threads = [
        threading.Thread(target=lcd_thread, daemon=True),
        threading.Thread(target=rfid_thread, daemon=True),
        threading.Thread(target=face_thread, daemon=True),
    ]

    for t in threads:
        t.start()

    print("[INFO] System is running. Press Ctrl+C to exit.")
    while True:
        time.sleep(1)

except KeyboardInterrupt:
    print("[INFO] Interrupted by user.")
    lcd_queue.put(("System Exit", "", 2))
    time.sleep(2)
    lcd.clear()
