# -*- coding: utf-8 -*-
'''
Real Time Face Recognition with RFID Folder-Based Matching + Relay and Servo Control
'''

import cv2
import os
import numpy as np
import RPi.GPIO as GPIO
from mfrc522 import SimpleMFRC522
import time
from PIL import Image
import pandas as pd

# GPIO Setup
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)

RELAY_PINS_ON = [26, 20]   # Example: RELAY_PINL1, RELAY_PINF1 (ON after match)
RELAY_PINS_OFF = [21, 16]  # Example: RELAY_PINL2, RELAY_PINF2 (OFF after match)
SERVO_PIN = 17

for pin in RELAY_PINS_ON + RELAY_PINS_OFF:
    GPIO.setup(pin, GPIO.OUT)
    GPIO.output(pin, GPIO.LOW)

GPIO.setup(SERVO_PIN, GPIO.OUT)
servo = GPIO.PWM(SERVO_PIN, 50)  # 50Hz PWM for servo
servo.start(0)

def open_close_gate():
    servo.ChangeDutyCycle(12.5)  # Open
    time.sleep(1)
    servo.ChangeDutyCycle(0)
    time.sleep(3)
    servo.ChangeDutyCycle(2.5)   # Close
    time.sleep(1)
    servo.ChangeDutyCycle(0)

def set_relays(success=True):
    if success:
        for pin in RELAY_PINS_ON:
            GPIO.output(pin, GPIO.HIGH)
        for pin in RELAY_PINS_OFF:
            GPIO.output(pin, GPIO.LOW)
    else:
        for pin in RELAY_PINS_ON + RELAY_PINS_OFF:
            GPIO.output(pin, GPIO.LOW)

def get_images_and_labels(path):
    image_paths = [os.path.join(path, f) for f in os.listdir(path) if f.endswith('.jpg')]
    face_samples, ids = [], []
    for image_path in image_paths:
        img = Image.open(image_path).convert('L')
        img_np = np.array(img, 'uint8')
        faces = cv2.CascadeClassifier("haarcascade_frontalface_default.xml").detectMultiScale(img_np)
        for (x, y, w, h) in faces:
            face_samples.append(img_np[y:y+h, x:x+w])
            ids.append(1)
    return face_samples, ids

def main():
    reader = SimpleMFRC522()
    recognizer = cv2.face.LBPHFaceRecognizer_create()
    face_detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

    cam = cv2.VideoCapture(0)
    cam.set(3, 640)
    cam.set(4, 480)

    print("\n[INFO] Please scan your RFID card...")
    try:
        rfid_id, _ = reader.read()
        rfid_id = str(rfid_id)
        print(f"[INFO] RFID Scanned: {rfid_id}")
    except Exception as e:
        print(f"[ERROR] RFID Read Failed: {e}")
        GPIO.cleanup()
        return

    image_folder = os.path.join("dataset", rfid_id)
    if not os.path.exists(image_folder):
        print(f"[ERROR] No dataset folder found for RFID {rfid_id}")
        GPIO.cleanup()
        return

    # Load user's name from CSV
    csv_file = 'user_data.csv'
    user_data = pd.read_csv(csv_file)
    user_row = user_data[user_data['RFID_UID'] == int(rfid_id)]
    if user_row.empty:
        print("[ERROR] User not found in CSV.")
        GPIO.cleanup()
        return
    user_name = user_row.iloc[0]['Name']

    print("[INFO] Training model...")
    faces, ids = get_images_and_labels(image_folder)
    recognizer.train(faces, np.array(ids))

    print("[INFO] Model trained. Looking for face...")

    font = cv2.FONT_HERSHEY_SIMPLEX
    matched = False

    while True:
        ret, img = cam.read()
        if not ret or img is None:
            print("[ERROR] Failed to read from camera.")
            continue

        img = cv2.flip(img, -1)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        faces = face_detector.detectMultiScale(gray, 1.3, 5)

        for (x, y, w, h) in faces:
            id_pred, confidence = recognizer.predict(gray[y:y+h, x:x+w])
            if confidence < 40:
                print(f"[INFO] Match found: {user_name} (Confidence: {confidence:.2f})")
                cv2.putText(img, user_name, (x+5, y-5), font, 1, (255,255,255), 2)
                cv2.rectangle(img, (x, y), (x+w, y+h), (0, 255, 0), 2)
                set_relays(success=True)
                open_close_gate()
                matched = True
                break
            else:
                cv2.putText(img, "Unknown", (x+5, y-5), font, 1, (0,0,255), 2)
                cv2.rectangle(img, (x, y), (x+w, y+h), (0, 0, 255), 2)

        cv2.imshow("Face Verification", img)
        if matched or cv2.waitKey(1) & 0xFF == 27:
            break

    cam.release()
    cv2.destroyAllWindows()
    servo.stop()
    GPIO.cleanup()

while True:
    main()
