import cv2
import numpy as np
from PIL import Image
import os
import csv

# Paths
dataset_path = 'dataset'
trainer_path = 'trainer'
labels_path = os.path.join(trainer_path, 'labels.csv')

# Create trainer directory if it doesn't exist
if not os.path.exists(trainer_path):
    os.makedirs(trainer_path)

# Initialize recognizer and face detector
recognizer = cv2.face.LBPHFaceRecognizer_create()
detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")

# Predefined colors (BGR format)
color_list = [
    (0, 255, 255),  # Yellow
    (0, 255, 0),    # Green
    (255, 0, 0),    # Blue
    (255, 255, 0),  # Cyan
    (255, 0, 255),  # Magenta
    (0, 0, 255),    # Red
    (255, 255, 255) # White
]

# Function to get images and labels
def getImagesAndLabels(path):
    face_samples = []
    ids = []
    labels = []

    rfid_folders = [f for f in os.listdir(path) if os.path.isdir(os.path.join(path, f))]
    rfid_color_map = {}

    for index, folder_name in enumerate(rfid_folders):
        folder_path = os.path.join(path, folder_name)

        try:
            id = int(folder_name)
        except ValueError:
            print(f"[WARNING] Skipping folder with invalid RFID: {folder_name}")
            continue

        color = color_list[index % len(color_list)]
        rfid_color_map[id] = color

        # Read name from name.txt
        name_file = os.path.join(folder_path, 'name.txt')
        if os.path.exists(name_file):
            with open(name_file, 'r') as f:
                name = f.read().strip()
        else:
            name = "Unknown"

        labels.append((id, name))

        for image_file in os.listdir(folder_path):
            if not image_file.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp')):
                continue  # skip non-image files

            image_path = os.path.join(folder_path, image_file)
            try:
                pil_img = Image.open(image_path).convert('L')  # grayscale
            except Exception as e:
                print(f"[WARNING] Skipping image {image_path}: {e}")
                continue

            img_numpy = np.array(pil_img, 'uint8')
            faces = detector.detectMultiScale(img_numpy)

            for (x, y, w, h) in faces:
                face_samples.append(img_numpy[y:y+h, x:x+w])
                ids.append(id)

                # Visual preview
                preview = cv2.cvtColor(img_numpy, cv2.COLOR_GRAY2BGR)
                cv2.rectangle(preview, (x, y), (x+w, y+h), rfid_color_map[id], 2)
                cv2.putText(preview, f"RFID: {id}", (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, rfid_color_map[id], 2)
                cv2.imshow("Training Preview", preview)
                cv2.waitKey(50)

    cv2.destroyAllWindows()
    return face_samples, ids, labels

# Start training
print("\n[INFO] Training faces. It will take a few seconds. Wait ...")
faces, ids, labels = getImagesAndLabels(dataset_path)
recognizer.train(faces, np.array(ids))

# Save trained model
recognizer.write(os.path.join(trainer_path, 'trainer.yml'))

# Save labels to CSV (unique RFID-name pairs)
with open(labels_path, 'w', newline='') as f:
    writer = csv.writer(f)
    writer.writerow(["RFID", "Name"])
    unique_labels = list({(id_, name) for id_, name in labels})  # remove duplicates
    writer.writerows(unique_labels)

print(f"\n[INFO] {len(np.unique(ids))} unique faces trained.")
print(f"[INFO] Labels saved to {labels_path}. Exiting Program.")
