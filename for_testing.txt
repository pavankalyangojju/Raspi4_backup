import threading
import time
import requests
import RPi.GPIO as GPIO

# === GPIO Setup ===
SERVO_PIN = 21
BUZZER_PIN = 20
LIGHT1_PIN = 26
LIGHT2_PIN = 19
FAN1_PIN = 13
FAN2_PIN = 6
LED_C = 12

GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)
GPIO.setup(SERVO_PIN, GPIO.OUT)
GPIO.setup(BUZZER_PIN, GPIO.OUT)
GPIO.setup(LIGHT1_PIN, GPIO.OUT)
GPIO.output(LIGHT1_PIN, GPIO.LOW)
GPIO.setup(LIGHT2_PIN, GPIO.OUT)
GPIO.output(LIGHT2_PIN, GPIO.LOW)
GPIO.setup(FAN1_PIN, GPIO.OUT)
GPIO.output(FAN1_PIN, GPIO.LOW)
GPIO.setup(FAN2_PIN, GPIO.OUT)
GPIO.output(FAN2_PIN, GPIO.LOW)
GPIO.setup(LED_C, GPIO.OUT)
GPIO.output(LED_C, GPIO.LOW)

servo = GPIO.PWM(SERVO_PIN, 50)
servo.start(0)

# === Telegram Bot Setup ===
BOT_TOKEN = "YOUR_BOT_TOKEN_HERE"
BASE_URL = f"https://api.telegram.org/bot{BOT_TOKEN}"
last_update_id = 0

# === Servo control via Telegram ===
def servo_from_telegram():
    print("[TELEGRAM] Rotating servo via Telegram...")
    GPIO.output(BUZZER_PIN, GPIO.HIGH)
    time.sleep(2)
    GPIO.output(BUZZER_PIN, GPIO.LOW)
    servo.ChangeDutyCycle(2.5)  # 0 degrees
    time.sleep(1)
    servo.ChangeDutyCycle(12.5)  # 180 degrees
    time.sleep(1)
    servo.ChangeDutyCycle(0)
    time.sleep(5)
    servo.ChangeDutyCycle(2.5)  # back to 0
    time.sleep(1)
    servo.ChangeDutyCycle(0)
    print("[TELEGRAM] Servo returned to closed position.")

# === Telegram Bot Listener ===
def telegram_listener():
    global last_update_id
    print("[INFO] Telegram listener started...")
    while True:
        try:
            url = f"{BASE_URL}/getUpdates?offset={last_update_id + 1}&timeout=10"
            response = requests.get(url).json()
            for update in response.get("result", []):
                last_update_id = update["update_id"]
                message = update.get("message", {}).get("text", "").lower()
                chat_id = update["message"]["chat"]["id"]
                print(f"[TELEGRAM] {message}")

                if message == "/light1_on":
                    GPIO.output(LIGHT1_PIN, GPIO.HIGH)
                    reply = "LIGHT1 IS ON"
                elif message == "/light1_off":
                    GPIO.output(LIGHT1_PIN, GPIO.LOW)
                    reply = "LIGHT1 IS OFF"
                elif message == "/light2_on":
                    GPIO.output(LIGHT2_PIN, GPIO.HIGH)
                    reply = "LIGHT2 IS ON"
                elif message == "/light2_off":
                    GPIO.output(LIGHT2_PIN, GPIO.LOW)
                    reply = "LIGHT2 IS OFF"
                elif message == "/fan1_on":
                    GPIO.output(FAN1_PIN, GPIO.HIGH)
                    reply = "FAN1 IS ON"
                elif message == "/fan1_off":
                    GPIO.output(FAN1_PIN, GPIO.LOW)
                    reply = "FAN1 IS OFF"
                elif message == "/fan2_on":
                    GPIO.output(FAN2_PIN, GPIO.HIGH)
                    reply = "FAN2 IS ON"
                elif message == "/fan2_off":
                    GPIO.output(FAN2_PIN, GPIO.LOW)
                    reply = "FAN2 IS OFF"
                elif message == "/all_on":
                    GPIO.output(LIGHT1_PIN, GPIO.HIGH)
                    GPIO.output(LIGHT2_PIN, GPIO.HIGH)
                    GPIO.output(FAN1_PIN, GPIO.HIGH)
                    GPIO.output(FAN2_PIN, GPIO.HIGH)
                    reply = "ALL ARE ON"
                elif message == "/all_off":
                    GPIO.output(LIGHT1_PIN, GPIO.LOW)
                    GPIO.output(LIGHT2_PIN, GPIO.LOW)
                    GPIO.output(FAN1_PIN, GPIO.LOW)
                    GPIO.output(FAN2_PIN, GPIO.LOW)
                    reply = "ALL ARE OFF"
                elif message == "/door_open":
                    reply = "Rotating servo from Telegram..."
                    threading.Thread(target=servo_from_telegram).start()
                else:
                    reply = "Send a valid command."

                requests.post(f"{BASE_URL}/sendMessage", data={"chat_id": chat_id, "text": reply})
        except Exception as e:
            print(f"[ERROR] Telegram: {e}")
        time.sleep(2)

# === Start Telegram Listener ===
threading.Thread(target=telegram_listener, daemon=True).start()

# === Keep Main Thread Alive ===
try:
    while True:
        time.sleep(1)
except KeyboardInterrupt:
    print("[INFO] Interrupted by user")
finally:
    print("[INFO] Cleaning up GPIO...")
    servo.stop()
    GPIO.cleanup()
