import cv2
import os
import numpy as np
import RPi.GPIO as GPIO
from mfrc522 import SimpleMFRC522
import time
from PIL import Image
import pandas as pd

# Setup GPIO
GPIO.setwarnings(False)
GPIO.setmode(GPIO.BCM)

RELAY_PINL1 = 26
RELAY_PINL2 = 19
RELAY_PINF1 = 13
RELAY_PINF2 = 6
SERVO_PIN = 17

GPIO.setup(RELAY_PINL1, GPIO.OUT)
GPIO.setup(RELAY_PINL2, GPIO.OUT)
GPIO.setup(RELAY_PINF1, GPIO.OUT)
GPIO.setup(RELAY_PINF2, GPIO.OUT)
GPIO.setup(SERVO_PIN, GPIO.OUT)

GPIO.output(RELAY_PINL1, GPIO.LOW)
GPIO.output(RELAY_PINL2, GPIO.LOW)
GPIO.output(RELAY_PINF1, GPIO.LOW)
GPIO.output(RELAY_PINF2, GPIO.LOW)

servo = GPIO.PWM(SERVO_PIN, 50)  # 50Hz PWM
servo.start(0)

def open_close():
    servo.ChangeDutyCycle(12.5)  
    time.sleep(1)
    servo.ChangeDutyCycle(0)
    time.sleep(3)
    servo.ChangeDutyCycle(2.5)  
    time.sleep(1)
    servo.ChangeDutyCycle(0)

def get_images_and_labels(path, face_detector):
    image_paths = [os.path.join(path, f) for f in os.listdir(path) if f.endswith('.jpg')]
    face_samples = []
    ids = []

    for image_path in image_paths:
        img = Image.open(image_path).convert('L')
        img_np = np.array(img, 'uint8')
        faces = face_detector.detectMultiScale(img_np)
        for (x, y, w, h) in faces:
            face_samples.append(img_np[y:y+h, x:x+w])
            ids.append(1)  # Dummy ID

    return face_samples, ids

def main():
    reader = SimpleMFRC522()
    face_detector = cv2.CascadeClassifier("haarcascade_frontalface_default.xml")
    recognizer = cv2.face.LBPHFaceRecognizer_create()

    try:
        print("\n[INFO] Please scan your RFID card...")
        rfid_id, _ = reader.read()
        rfid_id = str(rfid_id)
        print(f"[INFO] RFID Scanned: {rfid_id}")
    except Exception as e:
        print(f"[ERROR] RFID Read Failed: {e}")
        GPIO.cleanup()
        exit()

    image_folder = os.path.join("dataset", rfid_id)
    if not os.path.exists(image_folder):
        print(f"[ERROR] No dataset folder found for RFID {rfid_id}")
        GPIO.cleanup()
        exit()

    print("[INFO] Training model from RFID-specific folder...")
    faces, ids = get_images_and_labels(image_folder, face_detector)
    recognizer.train(faces, np.array(ids))

    user_name = "User"
    try:
        user_data = pd.read_csv("user_data.csv")
        user_row = user_data[user_data['RFID_UID'] == int(rfid_id)]
        if not user_row.empty:
            user_name = user_row.iloc[0]['Name']
    except:
        pass

    cam = cv2.VideoCapture(0)
    cam.set(3, 640)
    cam.set(4, 480)

    font = cv2.FONT_HERSHEY_SIMPLEX
    matched = False

    while True:
        ret, img = cam.read()
        if not ret or img is None:
            print("[WARNING] Camera frame not read properly. Skipping...")
            continue

        img = cv2.flip(img, -1)
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        faces = face_detector.detectMultiScale(gray, 1.3, 5)

        for (x, y, w, h) in faces:
            id_pred, confidence = recognizer.predict(gray[y:y+h, x:x+w])
            cv2.rectangle(img, (x, y), (x+w, y+h), (255, 0, 0), 2)

            if confidence < 40:
                cv2.putText(img, user_name, (x+5, y-5), font, 1, (255, 255, 255), 2)
                cv2.putText(img, f"{confidence:.2f}", (x+5, y+h-5), font, 1, (255, 255, 0), 1)
                print(f"[MATCH] Face matched with confidence {confidence:.2f}. Door Opened.")
                open_close()
                matched = True
                break
            else:
                cv2.putText(img, "Unknown", (x+5, y-5), font, 1, (0, 0, 255), 2)
                cv2.putText(img, f"{confidence:.2f}", (x+5, y+h-5), font, 1, (0, 255, 255), 1)
                print(f"[MISMATCH] Face not matched. Confidence: {confidence:.2f}")

        cv2.imshow("Face Recognition", img)

        if matched or cv2.waitKey(1) & 0xFF == 27:
            break

    cam.release()
    cv2.destroyAllWindows()

while True:
    main()

# Cleanup after exit
servo.stop()
GPIO.cleanup()
